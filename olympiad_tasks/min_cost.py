'''
Сервис третьих лиц подготовил сводную матрицу движения по платным дорогам. В прямоугольной таблице N x M, в каждой клетке которой записано некоторое число, в начале позиции водителя соответствует левая верхняя клетка.
По спецификации матрицы движение разрешается только в соседнюю клетку либо вправо, либо вниз (влево и вверх перемещаться запрещено). При проходе через клетку с водителя берут столько у.е., какое число записано в этой клетке. Деньги берут также за первую и последнюю клетки его пути.
Требуется найти минимальную сумму у.е., заплатив которую, водитель может попасть в правый нижний угол.

Входные данные
На вход подается матрица размерностью N x M (1<=N<=20, 1<=M<=20). В каждой ячейке матрицы – размеры штрафов в у.е. за прохождение через соответствующие клетки (числа от 0 до 100).

Выходные данные
В выходной файл запиши минимальную сумму, потратив которую можно попасть в правый нижний угол.
'''

def main(array):
    n = len(array) # number of rows
    m = len(array[0]) # number of columns (elements in each array)

    for i in range(1,m):                # elements in first row
        array[0][i] += array[0][i-1]    # re-build first row with l[i] = l[i] + l[i-1]

    for j in range(1,n):                # elements in first column
        array[j][0] += array[j-1][0]    # re-build first column with l[j] = l[j] + l[j-1] 
    
    for row in range(1,n):                # row = 1, 2
        for col in range(1,m):            # col = 1, 2, 3
            array[row][col] += min(array[row-1][col], array[row][col-1]) # select min from above or left

    return array[-1][-1]                # return bottom-right element (with min cost calculated)
    

array = [[1, 1, 1, 1],
         [5, 2, 2, 100],
         [9, 4, 2, 1]]

print(main(array))
